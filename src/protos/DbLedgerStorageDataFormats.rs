// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `DbLedgerStorageDataFormats.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct LedgerData {
    // message fields
    exists: ::std::option::Option<bool>,
    fenced: ::std::option::Option<bool>,
    masterKey: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    explicitLac: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedgerData {
    fn default() -> &'a LedgerData {
        <LedgerData as ::protobuf::Message>::default_instance()
    }
}

impl LedgerData {
    pub fn new() -> LedgerData {
        ::std::default::Default::default()
    }

    // required bool exists = 1;


    pub fn get_exists(&self) -> bool {
        self.exists.unwrap_or(false)
    }
    pub fn clear_exists(&mut self) {
        self.exists = ::std::option::Option::None;
    }

    pub fn has_exists(&self) -> bool {
        self.exists.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exists(&mut self, v: bool) {
        self.exists = ::std::option::Option::Some(v);
    }

    // required bool fenced = 2;


    pub fn get_fenced(&self) -> bool {
        self.fenced.unwrap_or(false)
    }
    pub fn clear_fenced(&mut self) {
        self.fenced = ::std::option::Option::None;
    }

    pub fn has_fenced(&self) -> bool {
        self.fenced.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fenced(&mut self, v: bool) {
        self.fenced = ::std::option::Option::Some(v);
    }

    // required bytes masterKey = 3;


    pub fn get_masterKey(&self) -> &[u8] {
        match self.masterKey.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_masterKey(&mut self) {
        self.masterKey.clear();
    }

    pub fn has_masterKey(&self) -> bool {
        self.masterKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_masterKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.masterKey = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_masterKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.masterKey.is_none() {
            self.masterKey.set_default();
        }
        self.masterKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_masterKey(&mut self) -> ::std::vec::Vec<u8> {
        self.masterKey.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes explicitLac = 4;


    pub fn get_explicitLac(&self) -> &[u8] {
        match self.explicitLac.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_explicitLac(&mut self) {
        self.explicitLac.clear();
    }

    pub fn has_explicitLac(&self) -> bool {
        self.explicitLac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_explicitLac(&mut self, v: ::std::vec::Vec<u8>) {
        self.explicitLac = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_explicitLac(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.explicitLac.is_none() {
            self.explicitLac.set_default();
        }
        self.explicitLac.as_mut().unwrap()
    }

    // Take field
    pub fn take_explicitLac(&mut self) -> ::std::vec::Vec<u8> {
        self.explicitLac.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LedgerData {
    fn is_initialized(&self) -> bool {
        if self.exists.is_none() {
            return false;
        }
        if self.fenced.is_none() {
            return false;
        }
        if self.masterKey.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exists = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fenced = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.masterKey)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.explicitLac)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.exists {
            my_size += 2;
        }
        if let Some(v) = self.fenced {
            my_size += 2;
        }
        if let Some(ref v) = self.masterKey.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.explicitLac.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.exists {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.fenced {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.masterKey.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.explicitLac.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedgerData {
        LedgerData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exists",
                |m: &LedgerData| { &m.exists },
                |m: &mut LedgerData| { &mut m.exists },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fenced",
                |m: &LedgerData| { &m.fenced },
                |m: &mut LedgerData| { &mut m.fenced },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "masterKey",
                |m: &LedgerData| { &m.masterKey },
                |m: &mut LedgerData| { &mut m.masterKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "explicitLac",
                |m: &LedgerData| { &m.explicitLac },
                |m: &mut LedgerData| { &mut m.explicitLac },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LedgerData>(
                "LedgerData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LedgerData {
        static instance: ::protobuf::rt::LazyV2<LedgerData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LedgerData::new)
    }
}

impl ::protobuf::Clear for LedgerData {
    fn clear(&mut self) {
        self.exists = ::std::option::Option::None;
        self.fenced = ::std::option::Option::None;
        self.masterKey.clear();
        self.explicitLac.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedgerData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20DbLedgerStorageDataFormats.proto\x12\x08bk.proto\"\x86\x01\n\nLedg\
    erData\x12\x18\n\x06exists\x18\x01\x20\x02(\x08R\x06existsB\0\x12\x18\n\
    \x06fenced\x18\x02\x20\x02(\x08R\x06fencedB\0\x12\x1e\n\tmasterKey\x18\
    \x03\x20\x02(\x0cR\tmasterKeyB\0\x12\"\n\x0bexplicitLac\x18\x04\x20\x01(\
    \x0cR\x0bexplicitLacB\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
